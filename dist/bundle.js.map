{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/app.js","src/filter.js","src/loadSongs.js","src/songMaker.js","src/switchViews.js"],"names":[],"mappingszIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\nlet SongLister = require(\"./songMaker\");\n// let loadSongs = require(\"./loadSongs\");\n// console.log(\"SongLister\", SongLister);\n\n$(document).ready(function() {\n\n\t// toggle views with nav bar links for view list and add song\n\t$(\"#viewSongs\").click(function(){\n\t\tSongLister.switchViews(\"viewSongs\");\n\t});\n\t$(\"#addSong\").click(function(){\n\t\tSongLister.switchViews(\"addSongs\");\n\t});\n\n\t// add new song button\n\t$(\"#addSongBtn\").click(function(){\n\t\tvar newSongToAdd = SongLister.loadSongs.addSong();\n\t\tsongList.push(newSongToAdd);\n\t\tSongLister.switchViews(\"viewSongs\");\n\t\tdisplaySongList(songList, \"current\");\n\t});\n\n\t//filtering\n\t$(\"#filterBtn\").click(function(){\n\t\tvar filteredList = SongLister.filter(songList);\n\t\t// console.log(\"testList\", testList);\n\t\t// SongLister.displaySongs(filteredList, \"filtered\");\n\t\tdisplaySongList(filteredList, \"filtered\");\n\t});\n\n\tvar listViewEl = $(\"#main\");\n\tvar addViewEl = $(\"#addSongSection\");\n\tvar sideBarEl = $(\"#sidebar\");\n\n\t// loading songs\n\tvar songList = []; //hold array of all songs\n\tvar song2List = []; //to hold the 2nd json of songs\n\tvar songsAdded = false; //determine if 2nd set of songs have been loaded\n\n\n\t// update select dropdowns with current artists and albums\n\tfunction updateFilterSelects(list, type){\n\t\tif (type !== \"filtered\") { //do not update selects if filtering\n\t\t\tvar artistsArray = [];\n\t\t\tvar albumArray = [];\n\t\t\t$(\"#artistSelect\").empty(); //clear artists select dropdown\n\t\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\t\tartistsArray.push(list[i].artist);\n\t\t\t\t$(\"#artistSelect\").append(`<option>${list[i].artist}</option>`);\n\n\t\t\t}$(\"#albumSelect\").empty(); //clear album select dropdown\n\t\t\tfor (let i = 0; i < list.length; i++) {\n\t\t\t\tartistsArray.push(list[i].artist);\n\t\t\t\t$(\"#albumSelect\").append(`<option>${list[i].album}</option>`);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction deleteSong(clickedButton) {\n\t\t// console.log(\"songList\", songList);\n\t\tvar clickedBtnID = event.target.id.split(\"--\")[1]; //get ID # of clicked delete button\n\n\t\tconsole.log(\"clickedBtnID\", clickedBtnID);\n\t\tsongList.splice(clickedBtnID, 1); //remove \n\t\tconsole.log(\"songList\", songList);\n\t\tdisplaySongList(songList, \"current\");\n\t}\n\n\tfunction showAll() {\n\t\tdisplaySongList(songList, \"current\");\n\t}\n\n\n\tlet displaySongList = function (list, type) { //could be current list or filtered list type\n\t\tlistViewEl.empty();\n\t\tconsole.log(\"display list\", list);\n\t\tfor (var i = 0; i < list.length; i++) { //add each song to the DOM\n\t\t\tlistViewEl.append(`<section id=\"section--${i}\" class=\"song\"><h2 class=\"songName\">${list[i].title}</h2><p class=\"artistName\">${list[i].artist}</p><p class=\"albumName\">${list[i].album}</p><button id=\"delBtn--${i}\" class=\"delBtns\">Delete Song</button></section>`);\n\t\t}\n\t\t$(\".delBtns\").on(\"click\", deleteSong);\n\n\t\tif (songsAdded === false) { //if 2nd set of songs has not been added yet, add button for more songs\n\t\t\tlistViewEl.append(`<div id=\"more\"><button id=\"moreButton\">More songs</button></div>`);\n\t\t\t$(\"#moreButton\").on(\"click\", addMoreSongs);\n\t\t}\n\n\t\tif (type === \"filtered\") {\n\t\t\tlistViewEl.append(`<div id=\"more\"><button id=\"removeFilterBtn\">Remove filter</button></div>`);\n\t\t\t$(\"#removeFilterBtn\").on(\"click\", showAll);\n\t\t}\n\n\t\t// $(document).on(\"click\", \".delBtns\", deleteSong); //adds listeners to all delete buttons\n\t\tupdateFilterSelects(list, type);\n\t};\n\n\n\tfunction addMoreSongs () {\n\t\tSongLister.loadSongs.getMoreSongs().\n\t\tthen(function(data2){\n\t\t\tsong2List = data2.songs;\n\t\t\tconsole.log(\"song2List\", song2List);\n\t\t\tfor (let i = 0; i < song2List.length; i++) { //add new songs from 2nd JSON to current song list array\n\t\t\t\tvar newSongObject = song2List[i];\n\t\t\t\tsongList.push(newSongObject);\n\t\t\t}\n\t\t\tconsole.log(\"songList\", songList);\n\t\t\tsongsAdded = true;\n\t\t\tdisplaySongList(songList, \"current\");\n\t\t});\n\t}\n\n\n\n\n\n\n\n\n\n\t//initial list of songs displayed\n\tlet currentView = \"viewSongs\";\n\n\tSongLister.loadSongs.getSongList().\n\t\tthen(function(data1){\n\t\t\tsongList = data1.songs;\n\t\t\tconsole.log(\"songList\", songList);\n\t\t\tdisplaySongList(songList, \"current\");\n\t\t});\n\n\n\n\n\n});\n\n","// One module is responsible for making the filtering form work. Therefore, it will need to use methods from the previous module.\n\n// Filtering\n\n// When the user selects an artist, only songs from that artist should appear.\n// When the user selects an album, only songs from that album should appear.\n\n\"use strict\";\n\n// let loadSongs = require(\"./loadSongs\");\n\nlet filter = function(currentList){ //create an array only with filtered songs\n\t// var currentList = loadSongs.getCurrentList();\n\tconsole.log(\"currentList\", currentList);\n\tvar filterArtist = $(\"#artistSelect option:selected\").text();\n\tvar filterAlbum = $(\"#albumSelect option:selected\").text();\n\n\tvar filterList = [];\n\tfor (let i = 0; i < currentList.length; i++) {\n\t\tconsole.log(\"currentList[i].artist\", currentList[i].artist);\n\t\tif (currentList[i].artist === filterArtist && currentList[i].album === filterAlbum) {\n\t\t\tfilterList.push(currentList[i]);\n\t\t}\n\t\t// if (currentList[i].album === filterAlbum) {\n\t\t// \tfilterList.push(currentList[i]);\n\t\t// }\n\t}\n\tconsole.log(\"filterList\", filterList);\n\n\t// var uniqueNames = [];\n\t// $.each(filterList, function(i, el){\n //    if($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);\n\t// });\n\treturn filterList;\n};\n\nmodule.exports = filter;","// One module is responsible for loading songs from a JSON file and storing them in an array. This module should expose one method for getting the entire list of songs, and one method for adding a song to the array.\n\n\"use strict\";\n\n\nlet getSongList = function(){\n\treturn new Promise((resolve, reject) => {\n\t\t$.ajax({\n\t    url: \"songs.json\"\n\t  }).done(function(data) {\n\t  \tconsole.log(\"data\", data);\n\t    resolve(data);\n    }).fail(function(xhr, status, error) {\n      reject(error);\n    });\n  });\n};\n\n\nlet getMoreSongs = function(){\n\treturn new Promise((resolve, reject) => {\n\t\t$.ajax({\n\t    url: \"songs2.json\"\n\t  }).done(function(data) {\n\t  \tconsole.log(\"data2\", data);\n\t    resolve(data);\n    }).fail(function(xhr, status, error) {\n      reject(error);\n    });\n  });\n};\n\n\nlet addSong = function(){\n\tvar newSongToAdd = {};\n  newSongToAdd.title = $(\"#newSongTitle\").val();\n  newSongToAdd.artist = $(\"#newArtist\").val();\n  newSongToAdd.album = $(\"#newAlbum\").val();\n  $(\".newSongInput\").val(\"\");\n  return newSongToAdd;\n //  songList.push(newSongToAdd);\n // \t// switchView();\n\t// displaySongs(songList, \"current\");\n\t// updateFilterSelects(songList);\n};\n\n\n\n\nmodule.exports = {getSongList, getMoreSongs, addSong};\n\n","\"use strict\";\n\nlet filter = require(\"./filter\");\nlet switchViews = require(\"./switchViews\");\nlet loadSongs = require(\"./loadSongs\");\n// let displaySongs = require(\"./displaySongs\");\n\nlet SongMaker = {filter, switchViews, loadSongs};\n\n\nmodule.exports = SongMaker;\n\n","//One module is responsible for showing the two views of the app (song list and song form).\n\n\"use strict\";\n\nlet switchViews = function(currentView) {\n\n\tif (currentView === \"viewSongs\") {\n\t\t$(\"#main\").addClass(\"visible\").removeClass(\"hidden\");\n\t\t$(\"#addSongSection\").addClass(\"hidden\").removeClass(\"visible\");\n\t\t$(\"#sidebar\").addClass(\"visible\").removeClass(\"hidden\");\t\n\t} else {\n\t\t$(\"#main\").addClass(\"hidden\").removeClass(\"visible\");\n\t\t$(\"#addSongSection\").addClass(\"visible\").removeClass(\"hidden\");\n\t\t$(\"#sidebar\").addClass(\"hidden\").removeClass(\"visible\");\t\n\t}\n\n};\n\n\nmodule.exports = switchViews;"]}